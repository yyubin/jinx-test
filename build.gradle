plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'org.jinx'
version = '0.0.1-SNAPSHOT'
description = 'jinx-test'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation "io.github.yyubin:jinx-core:0.0.6"
	annotationProcessor "io.github.yyubin:jinx-processor:0.0.6"

}

configurations {
	jinxCli
}

dependencies {
	// CLI 바이너리 (트랜지티브 포함)
	jinxCli "io.github.yyubin:jinx-cli:0.0.6"
}

tasks.register('jinx', JavaExec) {
	group = 'jinx'
	description = 'Run Jinx CLI (e.g., db migrate)'
	classpath = configurations.jinxCli
	mainClass = 'org.jinx.cli.JinxCli'

	// 기본 인자 (원하면 바꿔도 됨)
	args 'db', 'migrate'

	// 엔티티가 먼저 컴파일되어 스키마 JSON이 생성되도록
	dependsOn 'classes'
}

tasks.named('test') {
	useJUnitPlatform()
}
